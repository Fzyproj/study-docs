1. 断点应该加载方法上或者方法中。
2. MyController为父类接口类，MyControllerImpl为其实现类，那么@RequestMapping请求写在接口方法上，@RestController写在实现类上。
3. 接口应该是干净的，类上面不应该有spring的相关注解。而具体的注解都是在实现类中。
4. Controller和Service都应该面向接口编程，而且都需要编写对应的实现类，而Dao层不需要编写实现类，那是因为Mybatis已经为接口进行封装了。但是为了标准，我们为dao层接口加上Repository接口即可，这样就不会出现编译报错的情况了。
5. ibatis和mybatis对应关系？？？
答： ibatis是mybatis的前身，在appache的时候叫做ibatis，然而到了google code中变为mybatis命名，其功能更为强大。
6. @Mapper注解？？？
答案：参考MapperRegistry类，Mybatis 会有一个拦截器，会自动的把 @Mapper 注解的接口生成动态代理类。使用了 @MapperScan 注解，将会生成 MapperFactoryBean类。

7. @Autowired和@Resource的区别？？？
答：前者是Spring的注解，后者是jdk的注解，两者的作用是一样的，有强迫症的可以用后面的，就不会出现编译报错的情况了。

8. @Mapper什么时候可以去掉？
答：我们需要在主启动类上加上`@MapperScan({"com.xttblog.mapper","com.xttblog.dao"})`即可，这句话的意思是扫描Mapper类，自动会为各个包下的接口生成动态代理类。

9. @Resource和@Autowired的区别？
答： @Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。
@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。
共同点： Autowired和resource都是默认通过by type属性去注入bean的。在resource不指定任何属性的前提下。
10. eureka client和server注册，续约，下架，剔除之间的关系？
	1. eureka client 与 server之间心跳续约时间： 30s。
	2. eureka server心跳时间（集群DS之间）：
	// 3. eureka server对client 心跳时间： 60秒。
	4. CS之间如果超过90秒没有心跳那么会剔除该Client。
11. lombok builder使用？？？
答：如果Person是一个实体类的话，那么使用如下：Person p = Person.builder().name("付泽义").age(20).build();



1. 上传博客
2. autowired深入理解
3. json的处理